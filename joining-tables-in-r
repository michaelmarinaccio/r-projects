#----------------------------introduction-------------------------

---
title: "Joining Tables in R"
output: html_notebook
---

```{r message = FALSE}
# load packages
library(readr)
library(dplyr)
```

```{r message = FALSE}
# load orders data
orders <- read_csv("orders.csv")
customers <- read_csv("customers.csv")
products <- read_csv("products.csv")
```

```{r}
# inspect orders, customers and products here:
head(orders)
head(customers)
head(products)
```

#----------------------------joining-------------------------

---
title: "Joining Tables in R"
output: html_notebook
---

```{r message = FALSE}
# load packages
library(readr)
library(dplyr)
```

```{r message = FALSE}
# load orders data
orders <- read_csv("orders.csv")
customers <- read_csv("customers.csv")
products <- read_csv("products.csv")
```

```{r}
# inspect orders, customers and products
head(orders)
head(customers)
head(products)
```

```{r}
# define order_3_description here:
order_3_description <- "thing-a-ma-jig"

# define order_5_phone_number here:
order_5_phone_number <- "112-358-1321"
```

#----------------------------inner join I-------------------------

The inner_join() method looks for columns that are common between two data frames and then looks for rows where those columns’ values are the same. 
It then combines the matching rows into a single row in a new table.

We can call the inner_join() method with two data frames like this:

joined_df <- orders %>%
  inner_join(customers)

This will match up all of the customer information to the orders that each customer made.

---
title: "Joining Tables in R"
output: html_notebook
---

```{r message = FALSE}
# load packages
library(readr)
library(dplyr)
```

```{r message = FALSE}
# load sales and targets data
sales <- read_csv("sales.csv")
targets <- read_csv("targets.csv")
```

```{r}
# inspect orders, customers and products
head(sales)
head(targets)
```

```{r}
# define sales_vs_targets here:
sales_vs_targets <- sales %>%
  inner_join(targets)
sales_vs_targets
```

```{r}
# define crushing_it here:
crushing_it <- sales_vs_targets %>%
  filter(revenue > target)
crushing_it
```

#----------------------------inner join II-------------------------

In addition to using inner_join() to join two data frames together, we can use the pipe %>% to join multiple data frames together at once. 
The following command would join orders with customers, and then join the resulting data frame with products:

big_df <- orders %>%
  inner_join(customers) %>%
  inner_join(products)

---
title: "Joining Tables in R"
output: html_notebook
---

```{r message = FALSE}
# load packages
library(readr)
library(dplyr)
```

```{r message = FALSE}
# load and inspect sales and targets data
sales <- read_csv("sales.csv")
targets <- read_csv("targets.csv")
head(sales)
head(targets)
```

```{r}
# load men_women data here:
men_women <- read_csv("men_women_sales.csv")
# inspect men_women here:
head(men_women)
```

```{r}
# define all_data here:
all_data <- sales %>%
  inner_join(targets) %>%
  inner_join(men_women)
all_data
```

```{r}
# define results here:
results <- all_data %>%
  filter((revenue > target) & (women > men))
results
```

#----------------------------join on specific columns I-------------------------

Because the id columns would mean something different in each table, our default joins would be wrong.

One way that we could address this problem is to use the dplyr function rename() to rename the columns for our joins. 
In the example below, we will rename the column id in the customers data frame to customer_id, so that orders and customers now have a common column to join on.

customers <- customers %>%
  rename(customer_id = id)
inner_join(orders, customers)

---
title: "Joining Tables in R"
output: html_notebook
---

```{r message = FALSE}
# load packages
library(readr)
library(dplyr)
```

```{r message = FALSE}
# load orders and products data
orders <- read_csv("orders.csv")
products <- read_csv("products.csv")
```

```{r}
# inspect orders and products
head(orders)
head(products)
```

```{r}
# rename the id column of products here:
products <- products %>%
  rename(product_id = id)
```

```{r}
# define orders_products here:
orders_products <- orders %>%
  inner_join(products)
orders_products
```

#----------------------------join on specific columns II-------------------------

In the previous exercise, we learned how to use rename() to join two data frames whose columns don’t match.

A better option, however, exists. We can add the by argument when calling inner_join() to specify which columns we want to join on. 
In the example below, the “left” table is the one that comes first (orders), and the “right” table is the one that comes second (customers). 
This syntax says that we should match the customer_id from orders to the id in customers.

orders %>% 
  inner_join(customers,
             by = c('customer_id' = 'id'))

If we use this syntax, we’ll end up with two columns called id, one from the first table and one from the second. 
R won’t let you have two columns with the same name, so it will change them to id_x and id_y.
The new column names id_x and id_y aren’t very helpful for us when we read the table. We can help make them more useful by using the keyword suffix. 
We can provide a vector of suffixes to use instead of “_x” and “_y”.
For example, we could use the following code to make the suffixes reflect the table names:

orders %>% 
  inner_join(customers,
             by = c('customer_id' = 'id'),
             suffix = c('_order','_customer'))

---
title: "Joining Tables in R"
output: html_notebook
---

```{r message = FALSE}
# load packages
library(readr)
library(dplyr)
```

```{r message = FALSE}
# load orders and products data
orders <- read_csv("orders.csv")
products <- read_csv("products.csv")
```

```{r}
# inspect orders and products
head(orders)
head(products)
```

```{r}
# define orders_products here:
orders_products <- orders %>%
  inner_join(products, 
              by = c("product_id" = "id"))
orders_products
```

```{r}
# define products_orders here:
products_orders <- products %>%
  inner_join(orders,
              by = c("id" = "product_id"),
              suffix = c('_product','_order'))
products_orders
```

#----------------------------mismatched joins-------------------------

In this exercise, there is a new product "5", but it hasn't yet been added to the "products" data frame. Order "3" ordered product "5". When the "orders"
dataframe is joined to the "products" data frame, order "3" is excluded because product "5" is not yet defined.

---
title: "Joining Tables in R"
output: html_notebook
---

```{r message = FALSE}
# load packages
library(readr)
library(dplyr)
```

```{r message = FALSE}
# load orders and products data
orders <- read_csv("orders.csv")
products <- read_csv("products.csv")
```

```{r}
# inspect orders and products here:
head(orders)
head(products)
```

```{r}
# define orders_products here:
orders_products <- orders %>%
  inner_join(products)
orders_products
```

#----------------------------full join-------------------------

Suppose that two companies, Company A and Company B have just merged. They each have a list of customers, but they keep slightly different data. 
Company A has each customer’s name and email. Company B has each customer’s name and phone number. They have some customers in common, but some are different.
If we wanted to combine the data from both companies without losing the customers who are missing from one of the tables, we could use a Full Join. 
A Full Join would include all rows from both tables, even if they don’t match. Any missing values are filled in with NA.

full_joined_dfs <- company_a %>%
  full_join(company_b)

---
title: "Joining Tables in R"
output: html_notebook
---

```{r message = FALSE}
# load packages
library(readr)
library(dplyr)
```

```{r message = FALSE}
# load store_a and store_b data
store_a <- read_csv("store_a.csv")
store_b <- read_csv("store_b.csv")
```

```{r}
# inspect store_a and store_b
head(store_a)
head(store_b)
```

```{r}
# define store_a_b_full here:
store_a_b_full <- store_a %>%
  full_join(store_b)
store_a_b_full
```

#----------------------------left and right joins-------------------------

A Left Join includes all rows from the first (left) table, but only rows from the second (right) table that match the first table.
For this command, the order of the arguments matters. If the first data frame is company_a and we do a left join, 
we’ll only end up with rows that appear in company_a.
By listing company_a first, we get all customers from Company A, and only customers from Company B who are also customers of Company A.

left_joined_df <- company_a %>%
  left_join(company_b)

A Right Join is the exact opposite of left join. Here, the joined table will include all rows from the second (right) table, 
but only rows from the first (left) table that match the second table.
By listing company_a first and company_b second, we get all customers from Company B, and only customers from Company A who are also customers of Company B.

right_joined_df <- company_a %>%
  right_join(company_b)

---
title: "Joining Tables in R"
output: html_notebook
---

```{r message = FALSE}
# load packages
library(readr)
library(dplyr)
```

```{r message = FALSE}
# load store_a and store_b data
store_a <- read_csv("store_a.csv")
store_b <- read_csv("store_b.csv")
```

```{r}
# inspect store_a and store_b
head(store_a)
head(store_b)
```

```{r}
# define left_a_b here:
left_a_b <- store_a %>%
  left_join(store_b)
left_a_b
```

```{r}
# define left_b_a here:
left_b_a <- store_b %>%
  left_join(store_a)
left_b_a
```

#----------------------------concatenate data frames-------------------------

When we need to reconstruct a single data frame from multiple smaller data frames, we can use the dplyr bind_rows() method. 
This method only works if all of the columns are the same in all of the data frames.
If we want to combine these two data frames, we can use the following command:

concatenated_dfs <- df1 %>%
  bind_rows(df2)

---
title: "Joining Tables in R"
output: html_notebook
---

```{r message = FALSE}
# load packages
library(readr)
library(dplyr)
```

```{r message = FALSE}
# load bakery and ice_cream data
bakery <- read_csv('bakery.csv')
ice_cream <- read_csv('ice_cream.csv')
```

```{r}
# inspect bakery and ice_cream
head(bakery)
head(ice_cream)
```

```{r}
# define menu here:
menu <- bakery %>%
  bind_rows(ice_cream)
menu
```

#----------------------------review-------------------------

---
title: "Joining Tables in R"
output: html_notebook
---

```{r message = FALSE}
# load packages
library(readr)
library(dplyr)
```

```{r message = FALSE}
# load visits and checkouts data
visits <- read_csv('visits.csv')
checkouts <- read_csv('checkouts.csv')
```

```{r}
# inspect visits and checkouts here:
head(visits)
head(checkouts)
```

```{r}
# define v_to_c here:
v_to_c <- visits %>%
  inner_join(checkouts)
v_to_c
```

```{r}
# define avg_time_to_check here:
v_to_c <- v_to_c %>% 
  mutate(time = checkout_time - visit_time)
v_to_c
avg_time_to_check <- v_to_c %>% 
  summarize(mean_time = mean(time))
avg_time_to_check
```
