#------------------------diagnose the data------------------------

---
title: "Data Cleaning in R"
output: html_notebook
---

```{r message=FALSE, warning=FALSE}
# load libraries
library(readr)
library(dplyr)
```

```{r message=FALSE}
# read CSVs
grocery_1 <- read_csv('grocery_1.csv')
grocery_2 <- read_csv('grocery_2.csv')
```

```{r}
# inspect data frames
head(grocery_1)
head(grocery_2)

```

```{r}
# clean data frame
clean_data_frame <- 2

```

#------------------------dealing with multiple files------------------------

You can combine the base R functions list.files() and lapply() with readr and dplyr to organize this data better, as shown below:

files <- list.files(pattern = "file_.*csv")
df_list <- lapply(files,read_csv)
df <- bind_rows(df_list)

The first line uses list.files() and a regular expression, a sequence of characters describing a pattern of text that should be matched,
to find any file in the current directory that starts with 'file_' and has an extension of csv, storing the name of each file in a vector files
The second line uses lapply() to read each file in files into a data frame with read_csv(), storing the data frames in df_list
The third line then concatenates all of those data frames together with dplyr’s bind_rows() function

---
title: "Data Cleaning in R"
output: html_notebook
---

```{r message=FALSE, warning=FALSE}
# load libraries
library(readr)
library(dplyr)
```

```{r}
# list files
student_files <- list.files(pattern = "exams_.*csv")

```

```{r message=FALSE}
# read files
df_list <- lapply(student_files, read_csv)
```

```{r}
# concatenate data frames
students <- bind_rows(df_list)

```

```{r}
# number of rows in students
nrow_students <- nrow(students)
nrow_students
```

#------------------------reshaping your data------------------------

We can use tidyr’s gather() function to do this transformation. gather() takes a data frame and the columns to unpack:

df %>%
  gather('Checking','Savings',key='Account Type',value='Amount')

The arguments you provide are:

df: the data frame you want to gather, which can be piped into gather()
Checking and Savings: the columns of the old data frame that you want to turn into variables
key: what to call the column of the new data frame that stores the variables
value: what to call the column of the new data frame that stores the values

---
title: "Data Cleaning in R"
output: html_notebook
---

```{r message=FALSE, warning=FALSE}
# load libraries
library(dplyr)
library(tidyr)
```

```{r}
# load students data frame
load("students.Rda")
```

```{r}
# original column names
original_col_names <- colnames(students)
original_col_names
```

```{r}
# gather columns
students <- students %>%
  gather("fractions", "probability", key = "exam", value = "score")
head(students)
```

```{r}
# updated column names
gathered_col_names <- colnames(students)
gathered_col_names
```

```{r}
# unique value counts of exam
exam_counts <- count(students, exam)
exam_counts

```

#------------------------dealing with duplicates------------------------

To check for duplicates, we can use the base R function duplicated(), which will return a logical vector telling us which rows are duplicate rows.
If we call fruits %>% duplicated(), we would get the following vector:
>> [1] FALSE FALSE TRUE FALSE FALSE FALSE
We can use the dplyr distinct() function to remove all rows of a data frame that are duplicates of another row.
If we call fruits %>% distinct():
The "apple" row was deleted because it was exactly the same as another row. But the two "peach" rows remain because there is a difference in the price column.
If we wanted to remove every row with a duplicate value in the item column, we could specify a subset:
fruits %>%
  distinct(item,.keep_all=TRUE)
By default, this keeps the first occurrence of the duplicate.

---
title: "Data Cleaning in R"
output: html_notebook
---

```{r message=FALSE, warning=FALSE}
# load libraries
library(dplyr)
library(tidyr)
```

```{r}
# load students data frame
load("students.Rda")
```

```{r}
# drop id column
students <- students %>%
  select(-id)
head(students)
```

```{r}
# find duplicated rows
duplicates <- students %>%
  duplicated()
```

```{r}
# count duplicated rows
duplicate_counts <- duplicates %>%
  table()
duplicate_counts
```

```{r}
# remove duplicated rows, keep unique rows
unique_students <- students %>%
  distinct()
```

```{r}
# find and count duplicated rows in updated data frame
updated_duplicates <- unique_students %>%
  duplicated() %>%
  table()
updated_duplicates
```

#------------------------splitting by index------------------------

Let’s say we have a column “birthday” with data formatted in MMDDYYYY format. 
In other words, “11011993” represents a birthday of November 1, 1993. 
We want to split this data into day, month, and year so that we can use these columns as separate features.

In this case, we know the exact structure of these strings. The first two characters will always correspond to the month, 
the second two to the day, and the rest of the string will always correspond to year. 
We can easily break the data into three separate columns by splitting the strings into substrings using str_sub(), a helpful function from the stringr package:

# Create the 'month' column
df %>%
  mutate(month = str_sub(birthday,1,2)) #start at index 1, end at index 2

# Create the 'day' column
df %>%
  mutate(day = str_sub(birthday,3,4))

# Create the 'year' column
df %>%
  mutate(year = str_sub(birthday,5))

---
title: "Data Cleaning in R"
output: html_notebook
---

```{r message=FALSE, warning=FALSE}
# load libraries
library(dplyr)
library(stringr)
```

```{r}
# load students data frame
load("students.Rda")
```

```{r}
# print columns of students
colnames(students)
```

```{r}
# view head of students
head(students)
```

```{r}
# add gender and age columns
students <- students %>% 
  mutate(gender = str_sub(gender_age, 1,1))
head(students)
students <- students %>% 
  mutate(age = str_sub(gender_age, 2,3))
head(students)
```

```{r}
# drop gender_age column
students <- students %>%
  select(-gender_age)
head(students)
```

#------------------------splitting by character------------------------

Let’s say we have a column called "type" with data entries in the format "admin_US" or "user_Kenya".
Just like we saw before, this column actually contains two types of data. One seems to be the user type (with values like “admin” or “user”) 
and one seems to be the country this user is in (with values like “US” or “Kenya”).
We can no longer just split along the first 4 characters because admin and user are of different lengths. 
Instead, we know that we want to split along the "_". We can thus use the tidyr function separate() to split this column into two, separate columns:

# Create the 'user_type' and 'country' columns
df %>%
  separate(type,c('user_type','country'),'_')

type is the column to split
c('user_type','country') is a vector with the names of the two new columns
'_' is the character to split on

---
title: "Data Cleaning in R"
output: html_notebook
---

```{r message=FALSE, warning=FALSE}
# load libraries
library(dplyr)
library(tidyr)
```

```{r}
# load students data frame
load("students.Rda")
```

```{r}
# view the head of students
head(students)
```

```{r}
# separate the full_name column
students <- students %>%
  separate(full_name, c("first_name", "last_name"), " ", extra ="merge")
head(students)
```

#------------------------looking at data types------------------------

To see the types of each column of a data frame, we can use: str(df)
str() displays the internal structure of an R object. Calling str() with a data frame as an argument will return a variety of information, including the data types.
the data types would be:
#> $ item:        chr
#> $ price:       chr
#> $ calories:    num

---
title: "Data Cleaning in R"
output: html_notebook
---

```{r message=FALSE, warning=FALSE}
# load libraries
library(dplyr)
```

```{r}
# load students data frame
load("students.Rda")
```

```{r}
# print structure of students
str(students)
```

```{r}
# mean of age column
students %>% 
  summarise(mean_score = mean(score))     #throws warning
mean_score
```

#------------------------string parsing------------------------

First, we can use a regular expression, a sequence of characters that describe a pattern of text to be matched, to remove all of the dollar signs. 
The base R function gsub() will remove the $ from the price column, replacing the symbol with an empty string '':
fruit %>%
  mutate(price=gsub('\\$','',price))
Then, we can use the base R function as.numeric() to convert character strings containing numerical values to numeric:
fruit %>%
  mutate(price = as.numeric(price))

---
title: "Data Cleaning in R"
output: html_notebook
---

```{r message=FALSE, warning=FALSE}
# load libraries
library(dplyr)
```

```{r}
# load students data frame
load("students.Rda")
```

```{r}
# view head of students
head(students)
```

```{r}
# remove % from score column
students <- students %>%
  mutate(score=gsub("%", "", score))
students

```

```{r}
# change score column to numeric
students <- students %>%
  mutate(score = as.numeric(score))
students
```

#------------------------review------------------------

---
title: "Data Cleaning in R"
output: html_notebook
---

```{r message=FALSE, warning=FALSE}
# load libraries
library(dplyr)
```

```{r}
# load students data frame
load("students.Rda")
```

```{r}
# view head of students
head(students)
```

```{r}
# update age column
students <- students %>%
  mutate(age = as.numeric(age))
students
```
