#----------------------------introduction----------------------------

An aggregate statistic is a way of creating a single number that describes a group of numbers. 
Common aggregate statistics include mean, median, and standard deviation.

---
title: "Aggregates in R"
output: html_notebook
---

```{r message = FALSE}
# load packages
library(readr)
library(dplyr)
```

```{r message = FALSE}
# load data
orders <- read_csv("orders.csv")
page_visits <- read_csv("page_visits.csv")
```

```{r}
# inspect data frames
head(orders)
head(page_visits)
```

```{r}
# average price of order
average_price <- orders %>% 
  summarize(mean_price = mean(price, na.rm = TRUE))
average_price
```

```{r}
# page visits by UTM source
click_source <- page_visits %>%
  group_by(utm_source) %>%
  summarize(count = n())
click_source
```

```{r}
# page visits by UTM source and month
click_source_by_month <- page_visits %>%
  group_by(utm_source,month) %>%
  summarize(count = n())
click_source_by_month
```

#----------------------------calculating column statistics----------------------------

The general syntax for these calculations is:

df %>%
  summarize(var_name = command(column_name))

df is the data frame you are working with
summarize is a dplyr function that reduces multiple values to a single value
var_name is the name you assign to the column that stores the results of the summary function in the returned data frame
command is the summary function that is applied to the column by summarize()
column_name is the name of the column of df that is being summarized

Command	    Description
mean()	    Average of all values in column
median()  	Median value of column
sd()	      Standard deviation of column
var()	      Variance of column
min()	      Minimum value in column
max()	      Maximum value in column
IQR()	      Interquartile range of column
n_distinct()	Number of unique values in column
sum()	      Sum values of column

---
title: "Aggregates in R"
output: html_notebook
---

```{r message = FALSE}
# load packages
library(readr)
library(dplyr)
```

```{r message = FALSE}
# load order data
orders <- read_csv("orders.csv")

# inspect orders here:
head(orders, 10)
```

```{r}
# define most_expensive here:
most_expensive <- orders %>%
  summarize(max_price = max(price, na.rm = TRUE))
most_expensive
```

```{r}
# define num_colors here:
num_colors <- orders %>%
  summarize(n_colors = n_distinct(shoe_color))
num_colors
```

#----------------------------calculating aggregate functions I----------------------------

In general, we use the following syntax to calculate aggregates:

df %>%
  group_by(column_1) %>%
  summarize(aggregate_name = command(column_2))

column_1 (student in our example) is the column that we want to group_by()
column_2 (grade in our example) is the column that we want to apply command(), a summary function, to using summarize()
aggregate_name is the name assigned to the calculated aggregate

n() will return the count of the rows within a group, and does not require a column as an argument. 
To get the count of the rows in each group of students from our example:

grades <- df %>%
  group_by(student) %>%
  summarize(count = n())

---
title: "Aggregates in R"
output: html_notebook
---

```{r message = FALSE}
# load packages
library(readr)
library(dplyr)
```

```{r message = FALSE}
# load orders data
orders <- read_csv("orders.csv")

# inspect orders
head(orders)
```

```{r}
# define pricey_shoes here:
pricey_shoes <- orders %>%
  group_by(shoe_type) %>%
  summarize(max_price = max(price, na.rm = TRUE))
pricey_shoes

```

```{r}
# define shoes_sold here:
shoes_sold <- orders %>%
  group_by(shoe_type) %>%
  summarize(count = n())
shoes_sold
```

#----------------------------calculating aggregate functions II----------------------------

Sometimes, we want to group by more than one column. We can do this by passing multiple column names as arguments to the group_by function.
The code would look like this:

df %>%
  group_by(location,day_of_week) %>%
  summarize(mean_total_sales = mean(total_sales))

---
title: "Aggregates in R"
output: html_notebook
---

```{r message = FALSE}
# load packages
library(readr)
library(dplyr)
```

```{r message = FALSE}
# load orders data
orders <- read_csv("orders.csv")

# inspect orders
head(orders)
```

```{r}
# define shoe_counts here:
shoe_counts <- orders %>%
  group_by(shoe_type, shoe_color) %>%
  summarize(count = n())
shoe_counts
```

```{r}
# define shoe_prices here:
shoe_prices <- orders %>%
  group_by(shoe_type, shoe_material) %>%
  summarize(mean_price = mean(price, na.rm = TRUE))
shoe_prices
```

#----------------------------combining grouping with filter----------------------------

To filter the data frame to just these rows:

enrollments %>%
  group_by(course) %>%
  filter(mean(quiz_score) < 80)

group_by() groups the data frame by course into two groups: learn-r and learn-python
filter() will keep all the rows of the data frame whose per-group (per-course) average quiz_score is less than 80

The average quiz_score for the learn-r course is 85, so all the rows of enrollments with a value of learn-r in the course column are filtered out.
The average quiz_score for the learn-python course is 75, so all the rows of enrollments with a value of learn-python in the course column remain.

---
title: "Aggregates in R"
output: html_notebook
---

```{r message = FALSE}
# load packages
library(readr)
library(dplyr)
```

```{r message = FALSE}
# load orders data
orders <- read_csv("orders.csv")

# inspect orders
head(orders)
```

```{r}
# define most_pop_orders here:
most_pop_orders <- orders %>%
  group_by(shoe_type) %>%
  filter((count = n()) > 16)
most_pop_orders
```

#----------------------------combining grouping with mutate----------------------------

You want to add a new column to the data frame that stores the difference between a row’s quiz_score and the average quiz_score for that row’s course. 
To add the column:

enrollments %>% 
  group_by(course) %>% 
  mutate(diff_from_course_mean = quiz_score - mean(quiz_score))

group_by() groups the data frame by course into two groups: learn-r and learn-python
mutate() will add a new column diff_from_course_mean which is calculated as the difference between a row’s individual quiz_score 
and the mean(quiz_score) for that row’s group (course)

---
title: "Aggregates in R"
output: html_notebook
---

```{r message = FALSE}
# load packages
library(readr)
library(dplyr)
```

```{r message = FALSE}
# load orders data
orders <- read_csv("orders.csv")

# inspect orders
head(orders)
```

```{r}
# define diff_from_mean here:
diff_from_mean <- orders %>%
  group_by(shoe_type) %>%
  mutate(diff_from_shoe_type_mean = price - mean(price, na.rm = TRUE))
diff_from_mean
```

#----------------------------review----------------------------

---
title: "Aggregates in R"
output: html_notebook
---

```{r message = FALSE}
# load packages
library(readr)
library(dplyr)
```

```{r message = FALSE}
# load data
orders <- read_csv("orders.csv")
page_visits <- read_csv("page_visits.csv")
```

```{r}
# inspect data frames
head(orders)
head(page_visits)
```

```{r}
# define average_price here:
average_price <- orders %>%
  summarize(mean_price = mean(price, na.rm = TRUE))
average_price
```

```{r}
# define click_source here:
click_source <- page_visits %>%
  group_by(utm_source) %>%
  summarize(count = n())
click_source
```

```{r}
# define click_source_by_month here:
click_source_by_month <- page_visits %>%
  group_by(utm_source, month) %>%
  summarize(count = n())
click_source_by_month
```
